@using Microsoft.AspNetCore.Mvc.TagHelpers
@model RoomFinder.ViewModels.RoomViewModel

@{
    ViewData["Title"] = "Room Details";
}

<div class="container mt-4">
    <h1 class="display-4">Room Details</h1>
    
    <!-- Main Room Card -->
    <div class="card shadow-lg mb-4">
        <div class="row g-0">
            <!-- Room Image -->
            <div class="col-md-4">
                <img src="~/images/@Model.ImageUrl" class="img-fluid rounded-start h-100" alt="Room Image" style="object-fit: cover;">
            </div>
            
            <!-- Room Details -->
            <div class="col-md-8">
                <div class="card-body">
                    <h2 class="card-title">@Model.Name</h2><br/>
                    <p class="card-text text-muted">
                        <i class="fas fa-map-marker-alt"></i> @Model.Location
                    </p>
                    
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <span class="badge bg-@(Model.IsAvailable ? "success" : "danger") fs-6">
                            @(Model.IsAvailable ? "Available" : "Booked")
                        </span>
                        <h4 class="text-primary mb-0"><strong>Nrs </strong>@Model.Price.ToString("N2") <small class="text-muted fs-6">/ Month</small></h4>
                    </div>
                    
                    
                    <p class="card-text">@Model.Description</p>
                    
                    <div class="mt-3">
                        <button class="btn btn-primary me-2">
                            <i class="fas fa-calendar-check"></i> Book Now
                        </button>
                        <button class="btn btn-outline-secondary">
                            <i class="fas fa-heart"></i> Save
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Map Section -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-light">
            <h3 class="card-title mb-0">
                <i class="fas fa-map-marked-alt"></i> Location
            </h3>
        </div>
        <div class="card-body p-0">
            <div id="map" style="height: 400px;"></div>
        </div>
    </div>
    
    <!-- Comments Section -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-light">
            <div class="d-flex justify-content-between align-items-center">
                <h3 class="card-title mb-0">
                    <i class="fas fa-comments"></i> Comments
                </h3>
                <span class="badge bg-primary">@Model.Comments.Count Comments</span>
            </div>
        </div>
        
        <div class="card-body">
            @if (Model.Comments.Any())
            {
                foreach (var comment in Model.Comments)
                {
                    <div class="border-bottom pb-3 mb-3">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h5 class="mb-1">@comment.UserName</h5>
                                <small class="text-muted">
                                    <i class="far fa-clock"></i> @comment.CreatedAt.ToString("MMMM dd, yyyy")
                                </small>
                            </div>
                        </div>
                        <p class="mt-2 mb-0">@comment.Content</p>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-4">
                    <i class="far fa-comment-dots fa-3x text-muted mb-3"></i>
                    <p class="text-muted">No comments yet. Be the first to comment!</p>
                </div>
            }
        </div>
    </div>
    
    <!-- Add Comment Form -->
    <div class="card shadow-sm">
        <div class="card-header bg-light">
            <h3 class="card-title mb-0">
                <i class="fas fa-edit"></i> Add Your Comment
            </h3>
        </div>
        <div class="card-body">
            <form asp-action="AddComment" method="post">
                <input type="hidden" name="RoomId" value="@Model.RoomId" />
                <input type="hidden" class="form-control" id="UserName" name="UserName" value="_userManager.GetUserName(User)" />
                
                <div class="mb-3">
                    <label for="Content" class="form-label">Your Comment</label>
                    <textarea class="form-control" id="Content" name="Content" rows="4" required></textarea>
                </div>
                
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-paper-plane"></i> Submit 
                </button>
            </form>
        </div>
    </div>
</div>


    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" />
    <style>
        .card {
            border-radius: 10px;
            overflow: hidden;
        }
        .card-header {
            border-bottom: none;
        }
        #map {
            border-radius: 0 0 10px 10px;
        }
        .img-fluid {
            border-radius: 10px 0 0 10px;
        }
    </style>

@section Scripts {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"/>
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize map
            var lat = @(Model.Latitude.HasValue ? Model.Latitude.Value.ToString(System.Globalization.CultureInfo.InvariantCulture) : "NaN");
            var lng = @(Model.Longitude.HasValue ? Model.Longitude.Value.ToString(System.Globalization.CultureInfo.InvariantCulture) : "NaN");

            if (!isNaN(lat) && !isNaN(lng)) {
                try {
                    var map = L.map('map').setView([lat, lng], 15);
                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        attribution: 'Â© OpenStreetMap contributors',
                        maxZoom: 19
                    }).addTo(map);

                    var marker = L.marker([lat, lng]).addTo(map);
                    marker.bindPopup('@Html.Raw(Model.Location)').openPopup();
                } catch (e) {
                    document.getElementById('map').innerHTML = 
                        '<div class="alert alert-warning p-4">Error loading map: ' + e.message + '</div>';
                }
            } else {
                document.getElementById('map').innerHTML = 
                    '<div class="alert alert-info p-4">Location map not available</div>';
            }

            // Rating system
            
            stars.forEach(star => {
                star.addEventListener('click', function() {
                    const value = parseInt(this.getAttribute('data-value'));
                    
                    stars.forEach((s, index) => {
                        if (index < value) {
                            s.classList.remove('far');
                            s.classList.add('fas', 'active');
                        } else {
                            s.classList.remove('fas', 'active');
                            s.classList.add('far');
                        }
                    });
                });
                
                star.addEventListener('mouseover', function() {
                    const hoverValue = parseInt(this.getAttribute('data-value'));
                    stars.forEach((s, index) => {
                        if (index < hoverValue) {
                            s.classList.remove('far');
                            s.classList.add('fas');
                        } else {
                            s.classList.remove('fas');
                            s.classList.add('far');
                        }
                    });
                });
                
                star.addEventListener('mouseout', function() {
                    stars.forEach((s, index) => {
                        if (index < currentValue) {
                            s.classList.remove('far');
                            s.classList.add('fas', 'active');
                        } else {
                            s.classList.remove('fas', 'active');
                            s.classList.add('far');
                        }
                    });
                });
            });
        });
    </script>
}
